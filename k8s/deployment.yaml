apiVersion: apps/v1
kind: Deployment
metadata:
  name: productive-mining-app
  labels:
    app: productive-mining
    component: app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: productive-mining
      component: app
  template:
    metadata:
      labels:
        app: productive-mining
        component: app
    spec:
      containers:
      - name: app
        image: ghcr.io/your-username/productive-mining-platform:latest
        ports:
        - containerPort: 5000
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "5000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: productive-mining-secrets
              key: database-url
        - name: QDT_ENABLED
          value: "true"
        - name: QDT_HEAP_THRESHOLD
          value: "85"
        - name: MINING_DIFFICULTY_MIN
          value: "50"
        - name: MINING_DIFFICULTY_MAX
          value: "180"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /api/system/health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/system/health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: data-backups
          mountPath: /app/data-backups
      volumes:
      - name: data-backups
        persistentVolumeClaim:
          claimName: productive-mining-data

---
apiVersion: v1
kind: Service
metadata:
  name: productive-mining-service
  labels:
    app: productive-mining
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
  selector:
    app: productive-mining
    component: app

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: productive-mining-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - productive-mining.example.com
    secretName: productive-mining-tls
  rules:
  - host: productive-mining.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: productive-mining-service
            port:
              number: 80

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: productive-mining-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd